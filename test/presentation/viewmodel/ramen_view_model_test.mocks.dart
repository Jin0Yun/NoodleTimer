// Mocks generated by Mockito 5.4.5 from annotations
// in noodle_timer/test/presentation/viewmodel/ramen_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:noodle_timer/domain/entity/cook_history_entity.dart' as _i10;
import 'package:noodle_timer/domain/entity/noodle_preference.dart' as _i9;
import 'package:noodle_timer/domain/entity/ramen_brand_entity.dart' as _i4;
import 'package:noodle_timer/domain/entity/ramen_entity.dart' as _i5;
import 'package:noodle_timer/domain/entity/user_entity.dart' as _i7;
import 'package:noodle_timer/domain/repository/ramen_repository.dart' as _i2;
import 'package:noodle_timer/domain/repository/user_repository.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [RamenRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRamenRepository extends _i1.Mock implements _i2.RamenRepository {
  MockRamenRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.RamenBrandEntity>> loadBrands() =>
      (super.noSuchMethod(
            Invocation.method(#loadBrands, []),
            returnValue: _i3.Future<List<_i4.RamenBrandEntity>>.value(
              <_i4.RamenBrandEntity>[],
            ),
          )
          as _i3.Future<List<_i4.RamenBrandEntity>>);

  @override
  _i3.Future<List<_i5.RamenEntity>> loadAllRamen() =>
      (super.noSuchMethod(
            Invocation.method(#loadAllRamen, []),
            returnValue: _i3.Future<List<_i5.RamenEntity>>.value(
              <_i5.RamenEntity>[],
            ),
          )
          as _i3.Future<List<_i5.RamenEntity>>);

  @override
  _i3.Future<_i5.RamenEntity?> findRamenById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#findRamenById, [id]),
            returnValue: _i3.Future<_i5.RamenEntity?>.value(),
          )
          as _i3.Future<_i5.RamenEntity?>);

  @override
  _i3.Future<List<_i5.RamenEntity>> findRamensByIds(List<int>? ids) =>
      (super.noSuchMethod(
            Invocation.method(#findRamensByIds, [ids]),
            returnValue: _i3.Future<List<_i5.RamenEntity>>.value(
              <_i5.RamenEntity>[],
            ),
          )
          as _i3.Future<List<_i5.RamenEntity>>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i6.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i7.UserEntity?> getUserById(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#getUserById, [uid]),
            returnValue: _i3.Future<_i7.UserEntity?>.value(),
          )
          as _i3.Future<_i7.UserEntity?>);

  @override
  _i3.Stream<_i7.UserEntity?> getUserStream(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#getUserStream, [uid]),
            returnValue: _i3.Stream<_i7.UserEntity?>.empty(),
          )
          as _i3.Stream<_i7.UserEntity?>);

  @override
  _i3.Future<String> saveUser(_i7.UserEntity? user) =>
      (super.noSuchMethod(
            Invocation.method(#saveUser, [user]),
            returnValue: _i3.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(#saveUser, [user]),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<void> updateNoodlePreference(
    String? uid,
    _i9.NoodlePreference? preference,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateNoodlePreference, [uid, preference]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> saveCookHistory(
    String? uid,
    _i10.CookHistoryEntity? history,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveCookHistory, [uid, history]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i10.CookHistoryEntity>> getCookHistories(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#getCookHistories, [uid]),
            returnValue: _i3.Future<List<_i10.CookHistoryEntity>>.value(
              <_i10.CookHistoryEntity>[],
            ),
          )
          as _i3.Future<List<_i10.CookHistoryEntity>>);

  @override
  _i3.Future<void> deleteCookHistory(String? uid, String? historyId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCookHistory, [uid, historyId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setNeedsOnboarding(bool? needsOnboarding) =>
      (super.noSuchMethod(
            Invocation.method(#setNeedsOnboarding, [needsOnboarding]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> getNeedsOnboarding() =>
      (super.noSuchMethod(
            Invocation.method(#getNeedsOnboarding, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);
}
