// Mocks generated by Mockito 5.4.5 from annotations
// in noodle_timer/test/presentation/viewmodel/option_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:noodle_timer/core/logger/app_logger.dart' as _i6;
import 'package:noodle_timer/domain/entity/noodle_preference.dart' as _i5;
import 'package:noodle_timer/domain/entity/user_entity.dart' as _i4;
import 'package:noodle_timer/domain/usecase/user_usecase.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [UserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserUseCase extends _i1.Mock implements _i2.UserUseCase {
  MockUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.UserEntity?> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i3.Future<_i4.UserEntity?>.value(),
          )
          as _i3.Future<_i4.UserEntity?>);

  @override
  _i3.Future<bool> getNeedsOnboarding() =>
      (super.noSuchMethod(
            Invocation.method(#getNeedsOnboarding, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> setNeedsOnboarding(bool? needsOnboarding) =>
      (super.noSuchMethod(
            Invocation.method(#setNeedsOnboarding, [needsOnboarding]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateNoodlePreference(
    String? userId,
    _i5.NoodlePreference? preference,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateNoodlePreference, [userId, preference]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i6.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void d(String? message) => super.noSuchMethod(
    Invocation.method(#d, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void i(String? message) => super.noSuchMethod(
    Invocation.method(#i, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void w(String? message) => super.noSuchMethod(
    Invocation.method(#w, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void e(String? message, [Object? error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#e, [message, error, stackTrace]),
        returnValueForMissingStub: null,
      );
}
